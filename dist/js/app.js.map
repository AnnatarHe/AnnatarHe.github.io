{"version":3,"sources":["search.js","search_trigger.js","app.js"],"names":["handleCloseEvent","searchMask","remove","add","searchBtn","document","querySelector","searchText","resultDom","handleSearcher","Promise","resolve","reject","searchVal","value","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","posts","Symbol","iterator","next","done","post","title","indexOf","push","err","then","res","domStr","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","url","innerHTML","addEventListener","e","keyCode","trigger","close","searchMaskBtn","classList","preventDefault","targetClassList","target","isMaskClicked","contains","isCloseBtnClicked","isCloseIconClicked"],"mappings":"AAOA,YCwBA,SAASA,oBACRC,WAAWC,OAAO,QAClBD,WAAWE,IAAI,QDvBhB,GAAMC,WAAYC,SAASC,cAAc,mBACnCC,WAAaF,SAASC,cAAc,kBACpCE,UAAYH,SAASC,cAAc,0BAOnCG,eAAiB,WACnB,GAAIC,SAAQ,SAACC,EAASC,GAClB,GAAIC,GAAYN,WAAWO,MACvBC,KEEAC,GAA4B,EAC5BC,GAAoB,EACpBC,EAAiBC,MAErB,KFLA,IAAA,GAAiBC,GAAjBC,EAAiBC,MAAAC,OAAAC,cAAjBR,GAAAI,EAAAC,EAAAI,QAAAC,MAAAV,GAAA,EAAwB,CEOhB,GFPCW,GAAAP,EAAAN,KACAa,GAAKC,MAAMC,QAAQhB,IACpBE,EAAOe,KAAKH,IEWlB,MAAOI,GACLd,GAAoB,EACpBC,EAAiBa,EACnB,QACE,KACSf,GAA6BK,EAAAA,WAC9BA,EAAAA,YAEN,QACE,GAAIJ,EACA,KAAMC,IFlBlBP,EAAQI,KAEXiB,KAAK,SAAAC,GAEF,GAAIC,GAAS,6BEuBTC,GAA6B,EAC7BC,GAAqB,EACrBC,EAAkBlB,MAEtB,KF1BA,IAAA,GAAiBmB,GAAjBC,EAAiBN,EAAAV,OAAAC,cAAjBW,GAAAG,EAAAC,EAAAd,QAAAC,MAAAS,GAAA,EAAuB,CE4Bf,GF5BCR,GAAAW,EAAAxB,KACLoB,IAAA,gDAEeP,EAAKa,IAAL,iCACCb,EAAKC,MAAL,uCACCD,EAAKa,IAAL,mEE2BnB,MAAOT,GACLK,GAAqB,EACrBC,EAAkBN,EACpB,QACE,KACSI,GAA8BI,EAAAA,WAC/BA,EAAAA,YAEN,QACE,GAAIH,EACA,KAAMC,IF/BlB,MADAH,IAAU,UAGbF,KAAK,SAAAE,GAEF1B,UAAUiC,UAAYP,IAK9B9B,WAAUsC,iBAAiB,QAASjC,gBAAgB,GACpDL,UAAUsC,iBAAiB,QAAS,SAACC,GAChB,IAAbA,EAAEC,SACFnC,mBAEL,ECxDH,IAAMoC,SAAUxC,SAASC,cAAc,kBACjCwC,MAAQzC,SAASC,cAAc,kBAE/ByC,cAAgB1C,SAASC,cAAc,iBACvCL,WAAa8C,cAAcC,SAEjCH,SAAQH,iBAAiB,QAAS,WACjCzC,WAAWC,OAAO,QAClBD,WAAWE,IAAI,UACd,GAGF4C,cAAcL,iBAAiB,QAAS,SAAAC,GACvCA,EAAEM,gBACF,IAAIC,GAAkBP,EAAEQ,OAAOH,UAC3BI,EAAgBF,EAAgBG,SAAS,iBAAkB,GAAO,EAClEC,EAAoBJ,EAAgBG,SAAS,kBAAmB,GAAO,EACvEE,EAAqBL,EAAgBG,SAAS,aAAc,GAAO,GAGnED,GAAiBE,GAAqBC,IACzCvD,qBAIC","file":"app.js","sourcesContent":["// Warning:\n// this script for search post by json that jekyll generated\n// this script is coding. DO NOT use it in production!!!\n//\n// @Author  AnnatarHe\n// @Email   iamhele1994@gmail.com\n// @License MIT\n'use strict'\n\n// get the doms\nconst searchBtn = document.querySelector('.search__action')\nconst searchText = document.querySelector('.search__input')\nconst resultDom = document.querySelector('.search__result--lists')\n\n// Search action. \n// First of all. get the input by user.\n// Secondly. Using user input comparse with the json file\n// Finally. put it in dom!\n// Tips: innerHTML maybe good performance \nconst handleSearcher = () => {\n    new Promise((resolve, reject) => {\n        let searchVal = searchText.value\n        let result = []\n        for (let post of posts) {\n            if ( post.title.indexOf(searchVal) ) {\n                result.push(post)\n            }\n        }\n        resolve(result)\n    })\n    .then(res => {\n        // contact the dom string\n        let domStr = '<ul class=\"search-result\">'\n        for (let post of res ) {\n            domStr += `\n            <li>\n                <a href=\"${post.url}\">\n                    <span>${post.title}</span>\n                    <small>${post.url}</small>\n                </a>\n            </li>\n            `\n        }\n        domStr += '</ul>'\n        return domStr\n    })\n    .then(domStr => {\n        // render it!\n        resultDom.innerHTML = domStr\n    })\n}\n\n// listening double event.\nsearchBtn.addEventListener('input', handleSearcher, false)\nsearchBtn.addEventListener('keyup', (e) => {\n    if (e.keyCode == 13) {\n        handleSearcher()\n    }\n}, false)\n","'use strict'\n\nconst trigger = document.querySelector('.searchTrigger')\nconst close = document.querySelector('.search__close')\n\nconst searchMaskBtn = document.querySelector('.search__mask')\nconst searchMask = searchMaskBtn.classList\n\ntrigger.addEventListener('click', () => {\n\tsearchMask.remove('hide')\n\tsearchMask.add('show')\n},false)\n\n// handle close event\nsearchMaskBtn.addEventListener('click', e => {\n\te.preventDefault()\n\tlet targetClassList = e.target.classList\n\tlet isMaskClicked = targetClassList.contains('search__mask') ? true : false\n\tlet isCloseBtnClicked = targetClassList.contains('search__close') ? true : false\n\tlet isCloseIconClicked = targetClassList.contains('fa-close') ? true : false\n\t// if clicked is target \n\t// then trigger close event\n\tif (isMaskClicked || isCloseBtnClicked || isCloseIconClicked) {\n\t\thandleCloseEvent()\n\t}else {\n\t\treturn\n\t}\n}, false)\n\n// handle close\n// just css animation\nfunction handleCloseEvent() {\n\tsearchMask.remove('show')\n\tsearchMask.add('hide')\n}","// Warning:\n// this script for search post by json that jekyll generated\n// this script is coding. DO NOT use it in production!!!\n//\n// @Author  AnnatarHe\n// @Email   iamhele1994@gmail.com\n// @License MIT\n'use strict';\n\n// get the doms\n\nvar searchBtn = document.querySelector('.search__action');\nvar searchText = document.querySelector('.search__input');\nvar resultDom = document.querySelector('.search__result--lists');\n\n// Search action.\n// First of all. get the input by user.\n// Secondly. Using user input comparse with the json file\n// Finally. put it in dom!\n// Tips: innerHTML maybe good performance\nvar handleSearcher = function handleSearcher() {\n    new Promise(function (resolve, reject) {\n        var searchVal = searchText.value;\n        var result = [];\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n            for (var _iterator = posts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                var post = _step.value;\n\n                if (post.title.indexOf(searchVal)) {\n                    result.push(post);\n                }\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                }\n            } finally {\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n\n        resolve(result);\n    }).then(function (res) {\n        // contact the dom string\n        var domStr = '<ul class=\"search-result\">';\n        var _iteratorNormalCompletion2 = true;\n        var _didIteratorError2 = false;\n        var _iteratorError2 = undefined;\n\n        try {\n            for (var _iterator2 = res[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var post = _step2.value;\n\n                domStr += '\\n            <li>\\n                <a href=\"' + post.url + '\">\\n                    <span>' + post.title + '</span>\\n                    <small>' + post.url + '</small>\\n                </a>\\n            </li>\\n            ';\n            }\n        } catch (err) {\n            _didIteratorError2 = true;\n            _iteratorError2 = err;\n        } finally {\n            try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return) {\n                    _iterator2.return();\n                }\n            } finally {\n                if (_didIteratorError2) {\n                    throw _iteratorError2;\n                }\n            }\n        }\n\n        domStr += '</ul>';\n        return domStr;\n    }).then(function (domStr) {\n        // render it!\n        resultDom.innerHTML = domStr;\n    });\n};\n\n// listening double event.\nsearchBtn.addEventListener('input', handleSearcher, false);\nsearchBtn.addEventListener('keyup', function (e) {\n    if (e.keyCode == 13) {\n        handleSearcher();\n    }\n}, false);\n'use strict';\n\nvar trigger = document.querySelector('.searchTrigger');\nvar close = document.querySelector('.search__close');\n\nvar searchMaskBtn = document.querySelector('.search__mask');\nvar searchMask = searchMaskBtn.classList;\n\ntrigger.addEventListener('click', function () {\n\tsearchMask.remove('hide');\n\tsearchMask.add('show');\n}, false);\n\n// handle close event\nsearchMaskBtn.addEventListener('click', function (e) {\n\te.preventDefault();\n\tvar targetClassList = e.target.classList;\n\tvar isMaskClicked = targetClassList.contains('search__mask') ? true : false;\n\tvar isCloseBtnClicked = targetClassList.contains('search__close') ? true : false;\n\tvar isCloseIconClicked = targetClassList.contains('fa-close') ? true : false;\n\t// if clicked is target\n\t// then trigger close event\n\tif (isMaskClicked || isCloseBtnClicked || isCloseIconClicked) {\n\t\thandleCloseEvent();\n\t} else {\n\t\treturn;\n\t}\n}, false);\n\n// handle close\n// just css animation\nfunction handleCloseEvent() {\n\tsearchMask.remove('show');\n\tsearchMask.add('hide');\n}"],"sourceRoot":"/source/"}