---
import Layout from '../layouts/Layout.astro';
import PageLayout from '../components/PageLayout.astro';
import { getCollection } from 'astro:content';
import { Calendar } from 'lucide-react';

const allPosts = await getCollection('posts');
const sortedPosts = allPosts
  .filter(post => !post.data.draft)
  .sort((a, b) => {
    const dateA = a.data.date || new Date(a.slug.slice(0, 10));
    const dateB = b.data.date || new Date(b.slug.slice(0, 10));
    return dateB.getTime() - dateA.getTime();
  });

// Group posts by year
const postsByYear = sortedPosts.reduce((acc, post) => {
  const year = (post.data.date || new Date(post.slug.slice(0, 10))).getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(post);
  return acc;
}, {} as Record<number, typeof sortedPosts>);

const years = Object.keys(postsByYear).sort((a, b) => Number(b) - Number(a));
---

<Layout title="Posts" description="Browse all blog posts by AnnatarHe">
  <PageLayout>
    <div class="max-w-2xl mx-auto px-4 py-16">
      <div class="text-center mb-16">
        <h1 class="text-3xl font-light text-white mb-4">
          Posts
        </h1>
        <p class="text-gray-400 text-sm">
          {sortedPosts.length} posts
        </p>
      </div>

      <div class="space-y-16">
        {years.map((year) => (
          <section>
            <div class="flex items-center gap-2 mb-6 text-gray-500">
              <Calendar size={16} />
              <h2 class="text-lg font-light">{year}</h2>
              <span class="text-sm">({postsByYear[Number(year)].length})</span>
            </div>
            
            <div class="space-y-6 ml-6">
              {postsByYear[Number(year)].map((post) => {
                const postDate = post.data.date || new Date(post.slug.slice(0, 10));
                return (
                  <article class="group">
                    <a href={`/posts/${post.slug}`} class="block">
                      <div class="flex items-baseline justify-between gap-4">
                        <h3 class="text-gray-200 group-hover:text-teal-400 transition-colors flex-grow">
                          {post.data.title}
                        </h3>
                        <time class="text-gray-500 text-sm shrink-0">
                          {postDate.toLocaleDateString('en-US', {
                            month: 'short',
                            day: 'numeric'
                          })}
                        </time>
                      </div>
                      {post.data.tags && (
                        <div class="flex flex-wrap gap-1.5 mt-2">
                          {post.data.tags.split(' ').filter(tag => tag.trim()).slice(0, 3).map((tag) => (
                            <span class="text-xs text-gray-500">
                              #{tag.trim()}
                            </span>
                          ))}
                        </div>
                      )}
                    </a>
                  </article>
                );
              })}
            </div>
          </section>
        ))}
      </div>
    </div>
  </PageLayout>
</Layout>