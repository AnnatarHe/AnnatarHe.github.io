---
import Layout from '../../layouts/Layout.astro';
import PageLayout from '../../components/PageLayout.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { Calendar, Clock, ArrowLeft } from 'lucide-react';
import A from '../../components/markdown/A.astro';
import Heading1 from '../../components/markdown/Heading1.astro';
import Heading2 from '../../components/markdown/Heading2.astro';
import Heading3 from '../../components/markdown/Heading3.astro';
import Heading4 from '../../components/markdown/Heading4.astro';
import Heading5 from '../../components/markdown/Heading5.astro';
import Heading6 from '../../components/markdown/Heading6.astro';
import Hr from '../../components/markdown/Hr.astro';
import P from '../../components/markdown/P.astro';
import AdSense from '../../components/AdSense.astro';

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

type Props = CollectionEntry<'posts'>;

const post = Astro.props;
const { Content, remarkPluginFrontmatter } = await post.render();

const postDate = post.data.date || new Date(post.slug.slice(0, 10));
const readingTime = remarkPluginFrontmatter?.minutesRead || '5 min read';
---

<Layout
  title={`${post.data.title} - AnnatarHe's Blog`}
  description={`${post.data.title} - A blog post by AnnatarHe`}
  type="article"
>
  <PageLayout>
    <article class="max-w-2xl mx-auto px-4 py-16">
      <!-- Back navigation -->
      <nav class="mb-8">
        <a
          href="/posts"
          class="inline-flex items-center gap-2 text-sm text-gray-400 hover:text-teal-400 transition-colors"
        >
          <ArrowLeft size={16} />
          <span>All posts</span>
        </a>
      </nav>

      <!-- Post Header -->
      <header class="mb-12">
        <h1 class="text-3xl md:text-4xl font-light leading-tight mb-6 text-white">
          {post.data.title}
        </h1>

        <div class="flex flex-wrap items-center gap-4 text-sm text-gray-500">
          <div class="flex items-center gap-1.5">
            <Calendar size={14} />
            <time>
              {postDate.toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric'
              })}
            </time>
          </div>

          <div class="flex items-center gap-1.5">
            <Clock size={14} />
            <span>{readingTime}</span>
          </div>

          {post.data.tags && (
            <div class="flex flex-wrap gap-2">
              {post.data.tags.split(' ').filter(tag => tag.trim()).map((tag) => (
                <span class="text-gray-500">
                  #{tag.trim()}
                </span>
              ))}
            </div>
          )}
        </div>
      </header>

      <!-- Post Content -->
      <div class="prose prose-lg max-w-none">
        <Content components={{
          a: A,
          h1: Heading1,
          h2: Heading2,
          h3: Heading3,
          h4: Heading4,
          h5: Heading5,
          h6: Heading6,
          hr: Hr,
          p: P,
        }} />
      </div>

      <!-- Google AdSense -->
      <AdSense />

      <!-- Post Footer -->
    </article>
  </PageLayout>
</Layout>

<style>
  @reference '../../styles/global.css';
  
  /* Base prose styles */
  .prose {
    @apply text-gray-200 leading-relaxed;
    font-size: 1.125rem;
    line-height: 1.75;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  /* Typography */
  .prose strong {
    @apply font-semibold text-white;
  }

  .prose em {
    @apply italic;
  }

  /* Code */
  .prose code {
    @apply bg-gray-900 text-teal-400 px-1.5 py-0.5 rounded text-[0.875em] font-mono;
  }

  .prose pre {
    @apply bg-gray-900 rounded-lg p-4 overflow-x-auto my-8 text-sm;
    box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.05);
  }

  .prose pre code {
    @apply bg-transparent p-0 text-gray-100;
  }

  /* Blockquote */
  .prose blockquote {
    @apply border-l-2 border-gray-700 pl-6 my-8 text-gray-300 italic;
  }

  .prose blockquote p:last-child {
    @apply mb-0;
  }

  /* Lists */
  .prose ul,
  .prose ol {
    @apply my-6 pl-6 space-y-2;
  }

  .prose ul {
    @apply list-disc marker:text-gray-600;
  }

  .prose ol {
    @apply list-decimal marker:text-gray-600;
  }

  .prose li {
    @apply pl-2;
  }

  .prose li > p {
    @apply mb-2;
  }

  .prose li > ul,
  .prose li > ol {
    @apply mt-2 mb-2;
  }

  /* Images */
  .prose img {
    @apply rounded-lg my-8 max-w-full h-auto mx-auto;
  }

  .prose figure {
    @apply my-8;
  }

  .prose figcaption {
    @apply text-center text-sm text-gray-500 mt-3;
  }

  /* Tables */
  .prose table {
    @apply w-full my-8 text-sm;
  }

  .prose th,
  .prose td {
    @apply border border-gray-800 px-3 py-2 text-left;
  }

  .prose th {
    @apply bg-gray-900 font-medium text-gray-300;
  }

  .prose tr:hover {
    @apply bg-gray-900/30;
  }

  /* Other elements */
  .prose iframe {
    @apply rounded-lg my-8 w-full aspect-video;
  }

  .prose video {
    @apply rounded-lg my-8 max-w-full h-auto;
  }

  .prose kbd {
    @apply bg-gray-900 border border-gray-800 rounded px-1.5 py-0.5 text-sm font-mono text-gray-300;
  }

  .prose mark {
    @apply bg-teal-400/20 text-teal-300 px-1 rounded;
  }

  .prose del {
    @apply line-through text-gray-600;
  }

  .prose details {
    @apply my-6 p-4 bg-gray-900/50 rounded-lg;
  }

  .prose summary {
    @apply cursor-pointer font-medium text-gray-200 hover:text-teal-400 transition-colors;
  }

  .prose details[open] summary {
    @apply mb-3;
  }

  /* Mobile adjustments */
  @media (max-width: 640px) {
    .prose {
      font-size: 1rem;
      line-height: 1.7;
    }

    .prose pre {
      @apply p-3 text-xs;
    }
  }
</style>
